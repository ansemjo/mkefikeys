#!/usr/bin/make -f

# Copyright (c) 2018 Anton Semjonov
# Licensed under the MIT License
#
# Partially based on work by Roderik W. Smith:
#  https://www.rodsbooks.com/efi-bootloaders/controlling-sb.html

# ------- variables --------

# command shell
SHELL := /usr/bin/bash

# certificate subject string format
SUBJECT := /OU=Secureboot Keys/CN=%kt/

# openssl config
DAYS := 3650
BITS := 2048
ENCRYPT := no

# inline configuration via subshell
define OPENSSLCNF
extensions = ext_sb
[ ext_ca ]
subjectKeyIdentifier    = hash
basicConstraints        = CA:true
[ ext_sb ]
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid
basicConstraints        = critical,CA:FALSE
extendedKeyUsage        = codeSigning
[ req ]
default_bits            = $(BITS)
default_md              = sha256
default_days            = $(DAYS)
encrypt_key             = $(ENCRYPT)
prompt                  = no
distinguished_name      = empty
[ empty ]
endef
export OPENSSLCNF
CONFIG := <(echo "$$OPENSSLCNF")

# target filenames
PK  := PlatformKey
KEK := KeyExchangeKey
DB  := DatabaseKey

# signature relationships
signer-$(PK)  := $(PK).key  $(PK).crt
signer-$(KEK) := $(PK).key  $(PK).crt
signer-$(DB)  := $(KEK).key $(KEK).crt

# efi variable names
efivar-$(PK)  := PK
efivar-$(KEK) := KEK
efivar-$(DB)  := db

# -------- pseudo-targets --------

# show usage information
.PHONY : help
define HELP
usage: mkefikeys <target> [ARGUMENTS=...]

 -- targets --
  certs   : generate all signing keys/certificates with openssl
   pk     : .. up to platform cert
   kek    : .. up to key exchange cert
   db     : .. up to database cert
  der     : encode certificates in DER format to *.cer files
  auth    : create signed efi variable updates

 -- arguments (defaults) --
  SUBJECT = certificate subject format ($(SUBJECT))
  DAYS    = validity period ($(DAYS))
  BITS    = rsa keylength ($(BITS))
  ENCRYPT = protect keys with a password ($(ENCRYPT))
  PK      = platform key filename ($(PK))
  KEK     = key exchange key filename ($(KEK))
  DB      = database key filename ($(DB))

endef
help :
	@: $(info $(HELP))

# generate all signing keys and certificates
.PHONY : certs pk kek db
certs : $(PK).crt $(KEK).crt $(DB).crt
pk    : $(PK).crt
kek   : pk $(KEK).crt
db    : kek $(DB).crt

# transform signing certificates to DER format
der : $(PK).cer $(KEK).cer $(DB).cer

# generate all signed efivar updates
.PHONY : auth
auth : certs $(PK).auth $(KEK).auth $(DB).auth

# never automatically remove these precious files
.PRECIOUS: %.key %.crt %.cer %.esl %.auth guid

# -------- actual targets --------

# random guid for efi signature lists
guid: ;	uuidgen -r > $@

# random inline serial for openssl certs
serial := <(uuidgen -r | tr -d '-')

# create platform signing key
$(PK).crt $(PK).key :
	openssl req -x509 -new -config $(CONFIG) -extensions ext_ca	-keyout $(PK).key -out $(PK).crt -subj '$(subst %kt,$(PK),$(SUBJECT))'

# create keyexchange and database signing keys
.SECONDEXPANSION:
%.crt %.key : $$(signer-%)
	openssl req -new -config $(CONFIG) -subj '$(subst %kt,$*,$(SUBJECT))' -keyout $*.key |\
	  openssl x509 -req -extfile $(CONFIG) -CAkey $(word 1,$^) -CA $(word 2,$^) -CAserial $(serial) -out $*.crt

# output der formatted certificates
%.cer : %.crt
	openssl x509 -in $< -out $@ -outform DER

# create efi signature list from certificate
%.esl : %.crt guid
	cert-to-efi-sig-list -g $$(< guid) $< $@

# create signed efivar update and removal
.SECONDEXPANSION:
%.auth : %.esl $$(signer-%)
	sign-efi-sig-list -g guid -k $(word 2,$^) -c $(word 3,$^) $(efivar-$*) $< $@

